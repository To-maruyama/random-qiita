{"version":3,"sources":["repository/Repository.ts","models/Tag.ts","models/Item.ts","repository/Qiita.ts","ItemList.tsx","index.tsx"],"names":["baseURL","axios","create","Tag","str","id","this","Tags","ids","map","x","join","Item","object","title","body","url","likesCount","createdAt","updatedAt","tags","likes_count","created_at","updated_at","name","DateTime","fromISO","toFormat","QiitaRepository","keyword","repository","get","params","then","response","data","page","useStyles","makeStyles","theme","search_tag","color","marginBottom","card","maxWidth","tag","marginRight","spacing","createModule","Symbol","withActions","$mounted","getItems","payload","getItemsDone","items","getTags","getTagsDone","withState","useModule","QiitaActions","getQiitaState","initialState","epic","on","Rx","a","Math","floor","random","result","query","reducer","state","ReactDOM","render","classes","useState","className","idsString","Grid","container","justify","direction","index","item","xs","Link","href","Card","key","CardContent","Chip","label","Typography","variant","component","createdAtView","updatedAtView","document","getElementById"],"mappings":"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","file":"static/js/main.db90d197.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst baseDomain = \"https://qiita.com\"\nconst baseURL = `${baseDomain}/api/v2`\n\nexport default axios.create({baseURL});","export default class Tag {\n    id: string;\n\n    constructor(str: string) {\n      this.id = str\n    }\n}\n\nexport class Tags {\n    ids: Array<Tag>;\n\n    constructor(ids: Array<Tag>) {\n      this.ids = ids;\n    }\n\n    get query(): string {\n      return this.ids.map(x => `tag:${x.id}`).join(' stocks:>10 OR ') + 'stocks:>10'\n    }\n\n    get idsString(): string {\n        return this.ids.map(x => x.id).join(' ')\n    }\n}","import Tag from './Tag'\nimport { DateTime } from 'luxon';\n\nexport default class Item {\n    title: string;\n    body: string;\n    url: string;\n    likesCount: number;\n    createdAt: string;\n    updatedAt: string;\n    tags: Tag[];\n\n    constructor(object: any) {\n      this.title = object.title\n      this.body = object.body\n      this.url = object.url\n      this.likesCount = object.likes_count\n      this.createdAt = object.created_at\n      this.updatedAt = object.updated_at\n      this.tags = object.tags.map((x: any) => new Tag(x.name))\n    }\n\n    get createdAtView() {return DateTime.fromISO(this.createdAt).toFormat('yyyy/MM/dd hh:mm')}\n\n    get updatedAtView() {return DateTime.fromISO(this.updatedAt).toFormat('yyyy/MM/dd hh:mm')}\n}","import repository from \"./Repository\"\nimport Item from \"../models/Item\"\nimport Tag, {Tags} from \"../models/Tag\"\n\nexport default class QiitaRepository {\n  async getItems(keyword: string): Promise<any> {\n    return repository.get(\n        \"/items\",\n        {\n          params: {\n            \"page\": \"1\",\n            \"per_page\": \"20\",\n            \"query\": keyword,\n          }\n        }\n    ).then((response) => { return response.data.map((x: any) => new Item(x))}\n    )\n  }\n\n  async getTags(page: number): Promise<Tags> {\n    return repository.get(\n        \"/tags\",\n        {\n          params: {\n            \"page\": page,\n            \"per_page\": \"3\",\n            \"sort\": \"count\",\n          }\n        }\n    ).then((response) => { return new Tags(response.data.map((x: any) => new Tag(x.id)))}\n    )\n  }\n}","import React from 'react';\nimport {useModule, getQiitaState} from './index'\n\nimport {Card, CardContent, Typography, Grid, Link, Chip} from '@material-ui/core/.';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    search_tag: {\n      color: '#fff',\n      marginBottom: 10,\n    },\n    card: {\n      maxWidth: 275,\n    },\n    tags: {\n      marginBottom: 12,\n    },\n    tag: {\n      marginRight: theme.spacing(1),\n      marginBottom: 5,\n    },\n    title: {\n      marginBottom: 10,\n    }\n  }));\n\nexport function ItemList() {\n    useModule();\n\n    const classes = useStyles();\n    const { items, tags } = getQiitaState.useState();\n  \n    return (\n      <div>\n        <div className={classes.search_tag}>\n          検索タグ : {tags.idsString}\n        </div>\n        <div>\n          <Grid container spacing={3} justify=\"flex-start\" direction=\"row\">\n            {items.map((x, index) =>\n              <Grid item xs={4}>\n                <Link href={x.url}>\n                  <Card key={index}>\n                    <CardContent>\n                      <Grid container spacing={3} justify=\"flex-start\" direction=\"row\" className={classes.tags}>\n                        {x.tags.map((tag, index) => \n                          <Chip className={classes.tag} color=\"primary\" label={tag.id} />\n                        )}\n                      </Grid>\n                      <Typography variant=\"h6\" component=\"h2\" className={classes.title} >\n                        {x.title}\n                      </Typography>\n                      <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                        いいね {x.likesCount}\n                      </Typography>\n                      <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                        作成日：{x.createdAtView}\n                      </Typography>\n                      <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                        更新日：{x.updatedAtView}\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </Link>\n                </Grid>\n            )}\n          </Grid>\n        </div>\n      </div>\n    );\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Rx from 'typeless/rx';\nimport { createModule, DefaultTypelessProvider } from 'typeless';\nimport QiitaRepository from './repository/Qiita'\nimport Item from './models/Item'\nimport {Tags} from './models/Tag'\nimport {ItemList} from './ItemList'\n\n/* == Module Interface == */\n\nexport const [useModule, QiitaActions, getQiitaState] = createModule(\n  Symbol('qiita')\n)\n  // Create Actions Creators\n  .withActions({\n    $mounted: null,\n    getItems: (tags: Tags) => ({ payload: { tags } }), // null means no args\n    getItemsDone: (items: Array<Item>, tags: Tags) => ({ payload: { items, tags } }),\n    getTags: null, // null means no args\n    getTagsDone: (tags: Tags) => ({ payload: { tags } }),\n  })\n  .withState<QiitaState>();\n\nexport interface QiitaState {\n  items: Array<Item>,\n  tags: Tags\n}\n\n/* == Module Implementation == */\n\nconst initialState: QiitaState = {\n  items: [],\n  tags: new Tags([])\n};\n\nconst repository = new QiitaRepository()\n\n// Create Epic for side effects\nuseModule\n  .epic()\n  // Listen for `count` and dispatch `countDone` with 500ms delay\n  .on(QiitaActions.$mounted, ()  => {return Rx.of(QiitaActions.getTags())})\n  .on(QiitaActions.getTags, async() => {\n    const page = Math.floor( Math.random() * 99 ) + 1\n    return repository.getTags(page).then((result) => QiitaActions.getTagsDone(result))\n  })\n  .on(QiitaActions.getTagsDone, ({tags}) => {return Rx.of(QiitaActions.getItems(tags))})\n  .on(QiitaActions.getItems, async({tags}) => {\n    return repository.getItems(tags.query).then((result) => QiitaActions.getItemsDone(result, tags))\n  });\n\n// Create a reducer\n// Under the hood it uses `immer` and state mutations are allowed\nuseModule\n  .reducer(initialState)\n  .on(QiitaActions.getItemsDone, (state, { items, tags }) => {\n    state.tags = tags;\n    state.items = items;\n  });\n\nReactDOM.render(\n  <DefaultTypelessProvider>\n    <ItemList />\n  </DefaultTypelessProvider>,\n  document.getElementById('app')\n);"],"sourceRoot":""}