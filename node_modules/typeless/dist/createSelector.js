"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var utils_1 = require("./utils");
function createSelector() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var selectors = args.slice(0, args.length - 1);
    var resultFunc = args[args.length - 1];
    var recomputations = 0;
    var memoizedFn = utils_1.memoize(function () {
        var fnArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fnArgs[_i] = arguments[_i];
        }
        recomputations++;
        return resultFunc.apply(void 0, tslib_1.__spread(fnArgs));
    });
    var memoizedSelectors = [];
    var ret = function () {
        var params = [];
        for (var i = 0; i < selectors.length; i++) {
            var selector = selectors[i];
            if (Array.isArray(selector)) {
                var _a = tslib_1.__read(selector, 2), getState = _a[0], map = _a[1];
                if (!memoizedSelectors[i]) {
                    memoizedSelectors[i] = utils_1.memoize(map);
                }
                params.push(memoizedSelectors[i](getState()));
            }
            else {
                params.push(selector());
            }
        }
        return memoizedFn.apply(void 0, tslib_1.__spread(params));
    };
    var stateGetters = extractStateGetters(selectors);
    ret.resultFunc = resultFunc;
    ret.resetRecomputations = function () { return (recomputations = 0); };
    ret.recomputations = function () { return recomputations; };
    ret.getStateGetters = function () { return stateGetters; };
    return ret;
}
exports.createSelector = createSelector;
function extractStateGetters(selectors) {
    var gettersSet = new Set();
    var stateGetters = [];
    var checkAdd = function (stateGetter) {
        if (!gettersSet.has(stateGetter)) {
            stateGetters.push(stateGetter);
            gettersSet.add(stateGetter);
        }
    };
    selectors.forEach(function (selector) {
        if (Array.isArray(selector)) {
            checkAdd(selector[0]);
        }
        else {
            selector.getStateGetters().forEach(checkAdd);
        }
    });
    return stateGetters;
}
//# sourceMappingURL=createSelector.js.map