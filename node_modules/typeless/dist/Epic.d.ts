import { Observable } from 'rxjs';
import { AC, Deps, ExtractPayload, ActionLike } from './types';
export declare type EpicResult = Observable<ActionLike | null> | Promise<ActionLike | null> | ActionLike | ActionLike[] | null;
export declare type EpicHandler<TAC extends AC> = (payload: ExtractPayload<ReturnType<TAC>>, deps: Deps, action: ReturnType<TAC> & {
    type: symbol;
}) => EpicResult;
export declare class Epic {
    handlers: Map<symbol, Map<string, Array<EpicHandler<any>>>>;
    moduleHandlers: Map<symbol, Array<EpicHandler<any>>>;
    attach(epic: Epic): this;
    on<TAC extends AC>(ac: TAC, handler: EpicHandler<TAC>): this;
    onMany<TAC extends AC, TAC2 extends AC>(ac: [TAC, TAC2], handler: EpicHandler<TAC | TAC2>): this;
    onMany<TAC extends AC, TAC2 extends AC, TAC3 extends AC>(ac: [TAC, TAC2, TAC3], handler: EpicHandler<TAC | TAC2 | TAC3>): this;
    onMany<TAC extends AC, TAC2 extends AC, TAC3 extends AC, TAC4 extends AC>(ac: [TAC, TAC2, TAC3, TAC4], handler: EpicHandler<TAC | TAC2 | TAC3 | TAC4>): this;
    onMany<TAC extends AC, TAC2 extends AC, TAC3 extends AC, TAC4 extends AC, TAC5 extends AC>(ac: [TAC, TAC2, TAC3, TAC4, TAC5], handler: EpicHandler<TAC | TAC2 | TAC3 | TAC4 | TAC5>): this;
    onModule(moduleSymbol: symbol, handler: EpicHandler<AC>): this;
    private createKey;
    private add;
}
//# sourceMappingURL=Epic.d.ts.map