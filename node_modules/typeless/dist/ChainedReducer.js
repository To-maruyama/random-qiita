"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var immer_1 = require("immer");
var utils_1 = require("./utils");
var createNestedReducer = function (prop, reducer) { return function (state, action) {
    var _a;
    if (typeof state === 'undefined') {
        throw new Error('tried to create createNestedReducer with undefined parent state');
    }
    var subState = reducer(state[prop], action);
    if (state[prop] !== subState) {
        return tslib_1.__assign({}, state, (_a = {}, _a[prop] = subState, _a));
    }
    return state;
}; };
var ChainedReducer = (function () {
    function ChainedReducer(initial) {
        this.initial = initial;
        this.reducerMap = new Map();
        this.defaultReducers = [];
        this.reducer = null;
    }
    ChainedReducer.prototype.asReducer = function () {
        var _this = this;
        if (!this.reducer) {
            var reducer_1 = this.getReducer();
            Object.getOwnPropertyNames(ChainedReducer.prototype).forEach(function (key) {
                var prop = _this[key];
                if (typeof prop === 'function') {
                    reducer_1[key] = prop.bind(_this);
                }
            });
            this.reducer = reducer_1;
        }
        return this.reducer;
    };
    ChainedReducer.prototype.attach = function (prop, fn) {
        if (typeof prop === 'string') {
            if (typeof fn !== 'function') {
                throw new Error('fn must be a function');
            }
            this.defaultReducers.push(createNestedReducer(prop, fn));
        }
        else {
            if (typeof prop !== 'function') {
                throw new Error('fn must be a function');
            }
            this.defaultReducers.push(prop);
        }
        return this.asReducer();
    };
    ChainedReducer.prototype.replace = function (actionCreator, fn) {
        this.transform(actionCreator, function (state, action) {
            return immer_1.produce(state, function (draft) { return fn(draft, action.payload, action); });
        });
        return this.asReducer();
    };
    ChainedReducer.prototype.mergePayload = function (actionCreators) {
        this.transform(actionCreators, function (state, action) {
            return Object.assign({}, state, action.payload);
        });
        return this.asReducer();
    };
    ChainedReducer.prototype.nested = function (prop, fn) {
        var nested = fn(new ChainedReducer(this.initial[prop]));
        this.defaultReducers.push(createNestedReducer(prop, nested.getReducer()));
        return this.asReducer();
    };
    ChainedReducer.prototype.on = function (actionCreator, fn) {
        this.transform(actionCreator, function (state, action) {
            return immer_1.produce(state, function (draft) { return fn(draft, action.payload, action); });
        });
        return this.asReducer();
    };
    ChainedReducer.prototype.onMany = function (actionCreator, fn) {
        return this.on(actionCreator, fn);
    };
    ChainedReducer.prototype.getReducer = function () {
        var _this = this;
        return function (state, action) {
            if (state === void 0) { state = _this.initial; }
            if (!action.type) {
                throw new Error('action.type must be defined');
            }
            var reducers = _this.getReducers(action.type).concat(_this.defaultReducers);
            if (!reducers.length) {
                return state;
            }
            return reducers.reduce(function (prev, fn) { return fn(prev, action); }, state);
        };
    };
    ChainedReducer.prototype.getReducers = function (actionType) {
        var _a = tslib_1.__read(actionType, 2), symbol = _a[0], type = _a[1];
        if (!this.reducerMap.has(symbol)) {
            this.reducerMap.set(symbol, new Map());
        }
        var map = this.reducerMap.get(symbol);
        if (!map.has(type)) {
            map.set(type, []);
        }
        return map.get(type);
    };
    ChainedReducer.prototype.transform = function (actionCreators, reducerFn) {
        var _this = this;
        var actionTypes = utils_1.toArray(actionCreators).map(function (ac) { return utils_1.getACType(ac); });
        actionTypes.forEach(function (action) {
            _this.getReducers(action).push(reducerFn);
        });
    };
    return ChainedReducer;
}());
exports.ChainedReducer = ChainedReducer;
//# sourceMappingURL=ChainedReducer.js.map