import { Observable } from 'rxjs';
export interface AC {
    (...args: any[]): any;
    getType?(): ActionType;
}
export declare type ActionType = [symbol, string];
export declare type Flatten<T> = {
    [K in keyof T]: T[K];
};
export declare type ActionLike = {
    type?: ActionType;
    payload?: any;
    meta?: any;
};
export declare type Action = {
    type: ActionType;
    payload?: any;
    meta?: any;
};
export declare type Reducer<S = any> = (state: S | undefined, action: ActionLike) => S;
export declare type ExtractPayload<T> = T extends {
    payload: infer P;
} ? P : null;
export interface Deps {
    action$: Observable<{
        type: ActionType;
        payload?: any;
        meta?: any;
    }>;
}
export declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export interface StateGetter<T> {
    (): T;
    useState(): T;
}
//# sourceMappingURL=types.d.ts.map