"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ReactDom = tslib_1.__importStar(require("react-dom"));
var rxjs_1 = require("rxjs");
var Store_1 = require("./Store");
var utils_1 = require("./utils");
var Notify_1 = require("./Notify");
var createOutputStream_1 = require("./createOutputStream");
var StateLogger_1 = require("./StateLogger");
var Registry = (function () {
    function Registry() {
        this.nameCount = new Map();
        this.displayNames = new Map();
        this.storesMap = new Map();
        this.stores = [];
        this.initStreams();
    }
    Registry.prototype.reset = function () {
        this.nameCount.clear();
        this.displayNames.clear();
        this.storesMap.clear();
        this.stores = [];
        this.initStreams();
    };
    Registry.prototype.getDisplayName = function (name) {
        var description = utils_1.getDescription(name);
        if (!this.displayNames.has(name)) {
            var count = this.nameCount.get(description) || 0;
            count++;
            this.nameCount.set(description, count);
            var displayName = count > 1 ? description + "#" + count : description;
            this.displayNames.set(name, displayName);
        }
        return this.displayNames.get(name);
    };
    Registry.prototype.getStore = function (name) {
        if (!this.storesMap.has(name)) {
            var store = new Store_1.Store(name, this.getDisplayName(name));
            this.storesMap.set(name, store);
            this.stores.push(store);
        }
        return this.storesMap.get(name);
    };
    Registry.prototype.dispatch = function (action) {
        var _this = this;
        ReactDom.unstable_batchedUpdates(function () {
            var e_1, _a, e_2, _b;
            var notify = new Notify_1.Notify();
            var stateLogger = null;
            if (process.env.NODE_ENV === 'development') {
                stateLogger = new StateLogger_1.StateLogger(_this.stores);
            }
            if (stateLogger) {
                stateLogger.setState('prevState', _this.getState());
            }
            try {
                for (var _c = tslib_1.__values(_this.stores), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var store = _d.value;
                    store.dispatch(action, notify);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (stateLogger) {
                stateLogger.setState('nextState', _this.getState());
                stateLogger.log(action);
            }
            try {
                for (var _e = tslib_1.__values(notify.handlers), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var fn = _f.value;
                    fn();
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            _this.input$.next(action);
        });
    };
    Registry.prototype.getState = function () {
        var e_3, _a;
        var state = {};
        try {
            for (var _b = tslib_1.__values(this.stores), _c = _b.next(); !_c.done; _c = _b.next()) {
                var store = _c.value;
                if (store.state !== undefined) {
                    state[store.displayName] = store.state;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return state;
    };
    Registry.prototype.initStreams = function () {
        var _this = this;
        this.input$ = new rxjs_1.Subject();
        this.output$ = createOutputStream_1.createOutputStream(this.input$, this.stores);
        this.output$.subscribe(function (action) {
            _this.dispatch(action);
        });
    };
    return Registry;
}());
exports.Registry = Registry;
//# sourceMappingURL=Registry.js.map