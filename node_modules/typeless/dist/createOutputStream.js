"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var utils_1 = require("./utils");
function getHandlers(stores, action) {
    var _a = tslib_1.__read(action.type, 2), symbol = _a[0], type = _a[1];
    return stores
        .filter(function (store) {
        if (!store.isEnabled || !store.epic) {
            return false;
        }
        var _a = store.epic, handlers = _a.handlers, moduleHandlers = _a.moduleHandlers;
        return (moduleHandlers.has(symbol) ||
            (handlers.has(symbol) && handlers.get(symbol).has(type)));
    })
        .map(function (store) {
        var _a = store.epic, handlers = _a.handlers, moduleHandlers = _a.moduleHandlers;
        return tslib_1.__spread((handlers.has(symbol) && handlers.get(symbol).has(type)
            ? handlers.get(symbol).get(type)
            : []), (moduleHandlers.has(symbol) ? moduleHandlers.get(symbol) : [])).map(function (handler) { return ({ store: store, handler: handler }); });
    })
        .reduce(function (ret, arr) {
        ret.push.apply(ret, tslib_1.__spread(arr));
        return ret;
    }, []);
}
function createOutputStream(action$, stores) {
    var deps = { action$: action$ };
    return action$.pipe(operators_1.subscribeOn(rxjs_1.queueScheduler), operators_1.observeOn(rxjs_1.queueScheduler), operators_1.mergeMap(function (sourceAction) {
        var handlers = getHandlers(stores, sourceAction);
        if (!handlers.length) {
            return rxjs_1.empty();
        }
        return rxjs_1.merge.apply(void 0, tslib_1.__spread(handlers.map(function (_a) {
            var store = _a.store, handler = _a.handler;
            return rxjs_1.defer(function () {
                var name = store.displayName;
                if (process.env.NODE_ENV === 'development') {
                    utils_1.logAction(name, sourceAction);
                }
                var result = handler(sourceAction.payload, deps, sourceAction);
                if (Array.isArray(result)) {
                    return rxjs_1.from(result);
                }
                if (utils_1.isAction(result)) {
                    return rxjs_1.of(result);
                }
                return result;
            }).pipe(operators_1.mergeMap(function (action) {
                if (action === null) {
                    return rxjs_1.empty();
                }
                if (action === undefined) {
                    console.error('Undefined action returned in epic.', {
                        action: action,
                        store: name,
                    });
                    return rxjs_1.empty();
                }
                if (!utils_1.isAction(action)) {
                    console.error('Invalid action returned in epic.', {
                        sourceAction: sourceAction,
                        action: action,
                        store: name,
                    });
                    return rxjs_1.empty();
                }
                return rxjs_1.of(action);
            }));
        })));
    }));
}
exports.createOutputStream = createOutputStream;
//# sourceMappingURL=createOutputStream.js.map