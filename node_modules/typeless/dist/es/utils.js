import * as tslib_1 from "tslib";
function isSymbol(x) {
    return (typeof x === 'symbol' ||
        (typeof x === 'object' &&
            Object.prototype.toString.call(x) === '[object Symbol]'));
}
export var isAction = function (action) {
    if (!action) {
        return false;
    }
    if (!Array.isArray(action.type) || action.type.length !== 2) {
        return false;
    }
    return isSymbol(action.type[0]) && typeof action.type[1] === 'string';
};
export var repeat = function (str, times) {
    return new Array(times + 1).join(str);
};
export var pad = function (num, maxLength) {
    return repeat('0', maxLength - num.toString().length) + num;
};
export var formatTime = function (time) {
    return pad(time.getHours(), 2) + ":" + pad(time.getMinutes(), 2) + ":" + pad(time.getSeconds(), 2) + "." + pad(time.getMilliseconds(), 3);
};
export function getDescription(s) {
    var match = /Symbol\((.+)\)/.exec(s.toString());
    if (!match) {
        throw new Error('Empty symbol: ' + s.toString());
    }
    return match[1];
}
export var getActionDescription = function (action) {
    var _a = tslib_1.__read(action, 2), symbol = _a[0], type = _a[1];
    return getDescription(symbol) + '/' + type;
};
export var logAction = function (epicName, action) {
    var gray = 'color: gray; font-weight: lighter;';
    var bold = 'font-weight: bold';
    var boldBlue = 'font-weight: bold; color: blue';
    var boldRed = 'font-weight: bold; color: red';
    var actionType = getActionDescription(action.type);
    var time = formatTime(new Date());
    if (!actionType.startsWith(epicName)) {
        console.log("%c epic%c " + epicName + "%c:%c" + actionType + " %c@ " + time, gray, boldBlue, gray, boldRed, gray);
    }
    else {
        console.log("%c epic%c " + actionType + " %c@ " + time, gray, bold, gray);
    }
};
export var snakeCase = function (str) {
    if (!str)
        return '';
    return String(str)
        .replace(/^[^A-Za-z0-9]*|[^A-Za-z0-9]*$/g, '')
        .replace(/([a-z])([A-Z])/g, function (m, a, b) { return a + '_' + b.toLowerCase(); })
        .replace(/[^A-Za-z0-9]+|_+/g, '_')
        .toLowerCase();
};
export var toArray = function (input) {
    return Array.isArray(input) ? input : [input];
};
export function shallowEqual(a, b) {
    if (!a || !b || a.length !== b.length) {
        return false;
    }
    for (var i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
            return false;
        }
    }
    return true;
}
export function memoize(fn) {
    var lastArgs = null;
    var lastResult;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!shallowEqual(args, lastArgs)) {
            lastResult = fn.apply(void 0, tslib_1.__spread(args));
        }
        lastArgs = args;
        return lastResult;
    };
}
export function getACType(ac) {
    if (!ac.getType) {
        throw new Error('getType() not defined in Action Creator: ' + ac.toString());
    }
    return ac.getType();
}
//# sourceMappingURL=utils.js.map