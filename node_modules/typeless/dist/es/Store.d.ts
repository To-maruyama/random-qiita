import { Reducer, ActionLike } from './types';
import { Epic } from './Epic';
import { Notify } from './Notify';
declare type Listener = () => void;
export declare class Store<TState = any> {
    name: symbol;
    displayName: string;
    isEnabled: boolean;
    state: TState | undefined;
    reducer: Reducer<TState> | null;
    epic: Epic | null;
    private listeners;
    private usageCount;
    constructor(name: symbol, displayName: string);
    initState(): void;
    enable({ epic, reducer }: {
        epic: Epic | null;
        reducer: Reducer<TState> | null;
    }): void;
    disable(): void;
    dispatch(action: ActionLike, notify?: Notify): void;
    subscribe(listener: Listener): () => void;
}
export {};
//# sourceMappingURL=Store.d.ts.map