import * as tslib_1 from "tslib";
import { getACType } from './utils';
var Epic = (function () {
    function Epic() {
        this.handlers = new Map();
        this.moduleHandlers = new Map();
    }
    Epic.prototype.attach = function (epic) {
        var e_1, _a, e_2, _b, _c;
        var subHandlers = epic.handlers;
        try {
            for (var _d = tslib_1.__values(epic.handlers.keys()), _e = _d.next(); !_e.done; _e = _d.next()) {
                var symbol = _e.value;
                try {
                    for (var _f = tslib_1.__values(epic.handlers.get(symbol).keys()), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var type = _g.value;
                        this.createKey([symbol, type]);
                        (_c = this.handlers
                            .get(symbol)
                            .get(type)).push.apply(_c, tslib_1.__spread(subHandlers.get(symbol).get(type)));
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return this;
    };
    Epic.prototype.on = function (ac, handler) {
        return this.add(ac, handler);
    };
    Epic.prototype.onMany = function (ac, handler) {
        return this.add(ac, handler);
    };
    Epic.prototype.onModule = function (moduleSymbol, handler) {
        if (!this.moduleHandlers.has(moduleSymbol)) {
            this.moduleHandlers.set(moduleSymbol, []);
        }
        this.moduleHandlers.get(moduleSymbol).push(handler);
        return this;
    };
    Epic.prototype.createKey = function (actionType) {
        var _a = tslib_1.__read(actionType, 2), symbol = _a[0], type = _a[1];
        if (!this.handlers.has(symbol)) {
            this.handlers.set(symbol, new Map());
        }
        var map = this.handlers.get(symbol);
        if (!map.has(type)) {
            map.set(type, []);
        }
    };
    Epic.prototype.add = function (ac, handler) {
        var _this = this;
        var keys = Array.isArray(ac)
            ? ac.map(function (x) { return getACType(x); })
            : [getACType(ac)];
        keys.forEach(function (_a) {
            var _b = tslib_1.__read(_a, 2), symbol = _b[0], type = _b[1];
            _this.createKey([symbol, type]);
            _this.handlers
                .get(symbol)
                .get(type)
                .push(handler);
        });
        return this;
    };
    return Epic;
}());
export { Epic };
//# sourceMappingURL=Epic.js.map