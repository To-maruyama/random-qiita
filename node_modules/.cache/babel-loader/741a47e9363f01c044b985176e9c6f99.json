{"ast":null,"code":"import * as tslib_1 from \"tslib\";\n\nvar Store = function () {\n  function Store(name, displayName) {\n    this.name = name;\n    this.displayName = displayName;\n    this.isEnabled = false;\n    this.state = undefined;\n    this.reducer = null;\n    this.epic = null;\n    this.listeners = [];\n    this.usageCount = 0;\n  }\n\n  Store.prototype.initState = function () {\n    if (this.reducer) {\n      this.state = this.reducer(undefined, {\n        type: [Symbol('__INIT__'), 'init']\n      });\n    }\n  };\n\n  Store.prototype.enable = function (_a) {\n    var epic = _a.epic,\n        reducer = _a.reducer;\n    this.usageCount++;\n    this.epic = epic || null;\n    this.reducer = reducer || null;\n    this.isEnabled = true;\n  };\n\n  Store.prototype.disable = function () {\n    this.usageCount--;\n\n    if (!this.usageCount) {\n      this.epic = null;\n      this.reducer = null;\n      this.isEnabled = false;\n    }\n  };\n\n  Store.prototype.dispatch = function (action, notify) {\n    var _this = this;\n\n    if (!this.isEnabled) {\n      return;\n    }\n\n    if (this.reducer) {\n      var nextState = this.reducer(this.state, action);\n\n      if (nextState !== this.state) {\n        this.state = nextState;\n\n        var notifyFn = function notifyFn() {\n          var e_1, _a;\n\n          try {\n            for (var _b = tslib_1.__values(_this.listeners), _c = _b.next(); !_c.done; _c = _b.next()) {\n              var listener = _c.value;\n              listener();\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n        };\n\n        if (notify) {\n          notify.add(notifyFn);\n        } else {\n          notifyFn();\n        }\n      }\n    }\n  };\n\n  Store.prototype.subscribe = function (listener) {\n    var _this = this;\n\n    this.listeners.push(listener);\n    return function () {\n      _this.listeners.splice(_this.listeners.indexOf(listener), 1);\n    };\n  };\n\n  return Store;\n}();\n\nexport { Store };","map":null,"metadata":{},"sourceType":"module"}