{"ast":null,"code":"import _slicedToArray from \"/Users/maru/project/random-qiita/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/maru/project/random-qiita/src/index.tsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Rx from 'typeless/rx';\nimport { createModule, DefaultTypelessProvider } from 'typeless';\nimport QiitaRepository from './repository/Qiita';\nimport { Tags } from './models/Tag';\nimport { ItemList } from './ItemList';\n/* == Module Interface == */\n\nconst _createModule$withAct = createModule(Symbol('qiita')) // Create Actions Creators\n.withActions({\n  $mounted: null,\n  getItems: tags => ({\n    payload: {\n      tags\n    }\n  }),\n  // null means no args\n  getItemsDone: (items, tags) => ({\n    payload: {\n      items,\n      tags\n    }\n  }),\n  getTags: null,\n  // null means no args\n  getTagsDone: tags => ({\n    payload: {\n      tags\n    }\n  })\n}).withState(),\n      _createModule$withAct2 = _slicedToArray(_createModule$withAct, 3),\n      useModule = _createModule$withAct2[0],\n      QiitaActions = _createModule$withAct2[1],\n      getQiitaState = _createModule$withAct2[2];\n\nexport { useModule, QiitaActions, getQiitaState };\n\n/* == Module Implementation == */\nconst initialState = {\n  items: [],\n  tags: new Tags([])\n};\nconst repository = new QiitaRepository(); // Create Epic for side effects\n\nuseModule.epic() // Listen for `count` and dispatch `countDone` with 500ms delay\n.on(QiitaActions.$mounted, () => {\n  return Rx.of(QiitaActions.getTags());\n}).on(QiitaActions.getTags, async () => {\n  const page = Math.floor(Math.random() * 99) + 1;\n  return repository.getTags(page).then(result => QiitaActions.getTagsDone(result));\n}).on(QiitaActions.getTagsDone, ({\n  tags\n}) => {\n  return Rx.of(QiitaActions.getItems(tags));\n}).on(QiitaActions.getItems, async ({\n  tags\n}) => {\n  return repository.getItems(tags.query).then(result => QiitaActions.getItemsDone(result, tags));\n}); // Create a reducer\n// Under the hood it uses `immer` and state mutations are allowed\n\nuseModule.reducer(initialState).on(QiitaActions.getItemsDone, (state, {\n  items,\n  tags\n}) => {\n  state.tags = tags;\n  state.items = items;\n});\nReactDOM.render(React.createElement(DefaultTypelessProvider, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63\n  },\n  __self: this\n}, React.createElement(ItemList, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 64\n  },\n  __self: this\n})), document.getElementById('app'));","map":{"version":3,"sources":["/Users/maru/project/random-qiita/src/index.tsx"],"names":["React","ReactDOM","Rx","createModule","DefaultTypelessProvider","QiitaRepository","Tags","ItemList","Symbol","withActions","$mounted","getItems","tags","payload","getItemsDone","items","getTags","getTagsDone","withState","useModule","QiitaActions","getQiitaState","initialState","repository","epic","on","of","page","Math","floor","random","then","result","query","reducer","state","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Rx from 'typeless/rx';\nimport { createModule, DefaultTypelessProvider } from 'typeless';\nimport QiitaRepository from './repository/Qiita'\nimport Item from './models/Item'\nimport {Tags} from './models/Tag'\nimport {ItemList} from './ItemList'\n\n/* == Module Interface == */\n\nexport const [useModule, QiitaActions, getQiitaState] = createModule(\n  Symbol('qiita')\n)\n  // Create Actions Creators\n  .withActions({\n    $mounted: null,\n    getItems: (tags: Tags) => ({ payload: { tags } }), // null means no args\n    getItemsDone: (items: Array<Item>, tags: Tags) => ({ payload: { items, tags } }),\n    getTags: null, // null means no args\n    getTagsDone: (tags: Tags) => ({ payload: { tags } }),\n  })\n  .withState<QiitaState>();\n\nexport interface QiitaState {\n  items: Array<Item>,\n  tags: Tags\n}\n\n/* == Module Implementation == */\n\nconst initialState: QiitaState = {\n  items: [],\n  tags: new Tags([])\n};\n\nconst repository = new QiitaRepository()\n\n// Create Epic for side effects\nuseModule\n  .epic()\n  // Listen for `count` and dispatch `countDone` with 500ms delay\n  .on(QiitaActions.$mounted, ()  => {return Rx.of(QiitaActions.getTags())})\n  .on(QiitaActions.getTags, async() => {\n    const page = Math.floor( Math.random() * 99 ) + 1\n    return repository.getTags(page).then((result) => QiitaActions.getTagsDone(result))\n  })\n  .on(QiitaActions.getTagsDone, ({tags}) => {return Rx.of(QiitaActions.getItems(tags))})\n  .on(QiitaActions.getItems, async({tags}) => {\n    return repository.getItems(tags.query).then((result) => QiitaActions.getItemsDone(result, tags))\n  });\n\n// Create a reducer\n// Under the hood it uses `immer` and state mutations are allowed\nuseModule\n  .reducer(initialState)\n  .on(QiitaActions.getItemsDone, (state, { items, tags }) => {\n    state.tags = tags;\n    state.items = items;\n  });\n\nReactDOM.render(\n  <DefaultTypelessProvider>\n    <ItemList />\n  </DefaultTypelessProvider>,\n  document.getElementById('app')\n);"]},"metadata":{},"sourceType":"module"}