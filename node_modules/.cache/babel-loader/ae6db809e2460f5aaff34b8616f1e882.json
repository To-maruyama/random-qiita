{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ChainedReducer } from './ChainedReducer';\nimport { Epic } from './Epic';\nimport * as React from 'react';\nimport { getIsHmr } from './onHmr';\nimport { useMappedState } from './useMappedState';\nimport { snakeCase } from './utils';\nimport { useRegistry } from './useRegistry';\nexport function createModule(name) {\n  var hasState = false;\n  var actions = null;\n  var epic = null;\n  var reducer = null;\n  var store = null;\n  var base = [createHandle()];\n  base.withActions = withActions;\n  base.withState = withState;\n  getState._module = name.toString();\n  getState._store = null;\n\n  getState.useState = function () {\n    return useMappedState([getState], function (state) {\n      return state;\n    });\n  };\n\n  return base;\n\n  function createHandle() {\n    var handle = function () {\n      var registry = useRegistry();\n      store = registry.getStore(name);\n      getState._store = store;\n      React.useMemo(function () {\n        store.enable({\n          epic: epic,\n          reducer: reducer\n        });\n\n        if (!getIsHmr()) {\n          store.initState();\n\n          if (actions && actions.$init) {\n            registry.dispatch(actions.$init());\n          }\n        }\n      }, []);\n      React.useEffect(function () {\n        if (getIsHmr()) {\n          if (actions && actions.$remounted) {\n            registry.dispatch(actions.$remounted());\n          }\n        } else {\n          if (actions && actions.$mounted) {\n            registry.dispatch(actions.$mounted());\n          }\n        }\n\n        return function () {\n          if (actions && actions.$unmounting) {\n            registry.dispatch(actions.$unmounting());\n          }\n\n          if (store) {\n            store.disable();\n          }\n\n          if (actions && actions.$unmounted) {\n            registry.dispatch(actions.$unmounted());\n          }\n        };\n      }, []);\n    };\n\n    handle.epic = function () {\n      epic = new Epic();\n      return epic;\n    };\n\n    handle.reducer = function (initialState) {\n      var chained = new ChainedReducer(initialState);\n      reducer = chained.asReducer();\n      return reducer;\n    };\n\n    handle.reset = function () {\n      epic = null;\n      reducer = null;\n      store = null;\n    };\n\n    return handle;\n  }\n\n  function createActions(actionMap) {\n    actions = Object.keys(actionMap).reduce(function (acc, key) {\n      var type = snakeCase(key).toUpperCase();\n\n      acc[key] = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var ac = actionMap[key] || function () {\n          return {};\n        };\n\n        var action = ac.apply(void 0, tslib_1.__spread(args));\n        action.type = [name, type];\n        return action;\n      };\n\n      acc[key].getType = function () {\n        return [name, type];\n      };\n\n      return acc;\n    }, {});\n  }\n\n  function withActions(newActionMap) {\n    createActions(newActionMap);\n    var ret = [createHandle(), actions];\n\n    if (!hasState) {\n      ret.withState = withState;\n    } else {\n      ret.push(getState);\n    }\n\n    return ret;\n  }\n\n  function withState() {\n    hasState = true;\n    var ret = [createHandle()];\n\n    if (!actions) {\n      ret.withActions = withActions;\n    } else {\n      ret.push(actions);\n    }\n\n    ret.push(getState);\n    return ret;\n  }\n\n  function getState() {\n    return store ? store.state : undefined;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}