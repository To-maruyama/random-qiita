{"ast":null,"code":"import repository from \"./Repository\";\nimport Item from \"../models/Item\";\nimport Tag, { Tags } from \"../models/Tag\";\nexport default class QiitaRepository {\n  async getItems() {\n    return repository.get(\"/items\", {\n      params: {\n        \"page\": \"1\",\n        \"per_page\": \"20\",\n        \"query\": \"react\"\n      }\n    }).then(response => {\n      return response.data.map(x => new Item(x));\n    });\n  }\n\n  async getTags(page) {\n    return repository.get(\"/tags\", {\n      params: {\n        \"page\": page,\n        \"per_page\": \"10\",\n        \"sort\": \"name\"\n      }\n    }).then(response => {\n      return new Tags(response.data.map(x => new Tag(x)));\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/maru/project/typless-sample/src/repository/Qiita.ts"],"names":["repository","Item","Tag","Tags","QiitaRepository","getItems","get","params","then","response","data","map","x","getTags","page"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,GAAP,IAAaC,IAAb,QAAwB,eAAxB;AAEA,eAAe,MAAMC,eAAN,CAAsB;AACnC,QAAMC,QAAN,GAA+B;AAC7B,WAAOL,UAAU,CAACM,GAAX,CACH,QADG,EAEH;AACEC,MAAAA,MAAM,EAAE;AACN,gBAAQ,GADF;AAEN,oBAAY,IAFN;AAGN,iBAAS;AAHH;AADV,KAFG,EASLC,IATK,CASCC,QAAD,IAAc;AAAE,aAAOA,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAmBC,CAAD,IAAY,IAAIX,IAAJ,CAASW,CAAT,CAA9B,CAAP;AAAkD,KATlE,CAAP;AAWD;;AAED,QAAMC,OAAN,CAAcC,IAAd,EAA0C;AACxC,WAAOd,UAAU,CAACM,GAAX,CACH,OADG,EAEH;AACEC,MAAAA,MAAM,EAAE;AACN,gBAAQO,IADF;AAEN,oBAAY,IAFN;AAGN,gBAAQ;AAHF;AADV,KAFG,EASLN,IATK,CASCC,QAAD,IAAc;AAAE,aAAO,IAAIN,IAAJ,CAASM,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAmBC,CAAD,IAAY,IAAIV,GAAJ,CAAQU,CAAR,CAA9B,CAAT,CAAP;AAA2D,KAT3E,CAAP;AAWD;;AA3BkC","sourcesContent":["import repository from \"./Repository\"\nimport Item from \"../models/Item\"\nimport Tag, {Tags} from \"../models/Tag\"\n\nexport default class QiitaRepository {\n  async getItems(): Promise<any> {\n    return repository.get(\n        \"/items\",\n        {\n          params: {\n            \"page\": \"1\",\n            \"per_page\": \"20\",\n            \"query\": \"react\",\n          }\n        }\n    ).then((response) => { return response.data.map((x: any) => new Item(x))}\n    )\n  }\n\n  async getTags(page: number): Promise<any> {\n    return repository.get(\n        \"/tags\",\n        {\n          params: {\n            \"page\": page,\n            \"per_page\": \"10\",\n            \"sort\": \"name\",\n          }\n        }\n    ).then((response) => { return new Tags(response.data.map((x: any) => new Tag(x)))}\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}