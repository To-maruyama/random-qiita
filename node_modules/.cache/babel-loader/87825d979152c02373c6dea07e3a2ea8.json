{"ast":null,"code":"import * as tslib_1 from \"tslib\";\n\nfunction isSymbol(x) {\n  return typeof x === 'symbol' || typeof x === 'object' && Object.prototype.toString.call(x) === '[object Symbol]';\n}\n\nexport var isAction = function (action) {\n  if (!action) {\n    return false;\n  }\n\n  if (!Array.isArray(action.type) || action.type.length !== 2) {\n    return false;\n  }\n\n  return isSymbol(action.type[0]) && typeof action.type[1] === 'string';\n};\nexport var repeat = function (str, times) {\n  return new Array(times + 1).join(str);\n};\nexport var pad = function (num, maxLength) {\n  return repeat('0', maxLength - num.toString().length) + num;\n};\nexport var formatTime = function (time) {\n  return pad(time.getHours(), 2) + \":\" + pad(time.getMinutes(), 2) + \":\" + pad(time.getSeconds(), 2) + \".\" + pad(time.getMilliseconds(), 3);\n};\nexport function getDescription(s) {\n  var match = /Symbol\\((.+)\\)/.exec(s.toString());\n\n  if (!match) {\n    throw new Error('Empty symbol: ' + s.toString());\n  }\n\n  return match[1];\n}\nexport var getActionDescription = function (action) {\n  var _a = tslib_1.__read(action, 2),\n      symbol = _a[0],\n      type = _a[1];\n\n  return getDescription(symbol) + '/' + type;\n};\nexport var logAction = function (epicName, action) {\n  var gray = 'color: gray; font-weight: lighter;';\n  var bold = 'font-weight: bold';\n  var boldBlue = 'font-weight: bold; color: blue';\n  var boldRed = 'font-weight: bold; color: red';\n  var actionType = getActionDescription(action.type);\n  var time = formatTime(new Date());\n\n  if (!actionType.startsWith(epicName)) {\n    console.log(\"%c epic%c \" + epicName + \"%c:%c\" + actionType + \" %c@ \" + time, gray, boldBlue, gray, boldRed, gray);\n  } else {\n    console.log(\"%c epic%c \" + actionType + \" %c@ \" + time, gray, bold, gray);\n  }\n};\nexport var snakeCase = function (str) {\n  if (!str) return '';\n  return String(str).replace(/^[^A-Za-z0-9]*|[^A-Za-z0-9]*$/g, '').replace(/([a-z])([A-Z])/g, function (m, a, b) {\n    return a + '_' + b.toLowerCase();\n  }).replace(/[^A-Za-z0-9]+|_+/g, '_').toLowerCase();\n};\nexport var toArray = function (input) {\n  return Array.isArray(input) ? input : [input];\n};\nexport function shallowEqual(a, b) {\n  if (!a || !b || a.length !== b.length) {\n    return false;\n  }\n\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function memoize(fn) {\n  var lastArgs = null;\n  var lastResult;\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!shallowEqual(args, lastArgs)) {\n      lastResult = fn.apply(void 0, tslib_1.__spread(args));\n    }\n\n    lastArgs = args;\n    return lastResult;\n  };\n}\nexport function getACType(ac) {\n  if (!ac.getType) {\n    throw new Error('getType() not defined in Action Creator: ' + ac.toString());\n  }\n\n  return ac.getType();\n}","map":null,"metadata":{},"sourceType":"module"}