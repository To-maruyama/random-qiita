{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { getACType } from './utils';\n\nvar Epic = function () {\n  function Epic() {\n    this.handlers = new Map();\n    this.moduleHandlers = new Map();\n  }\n\n  Epic.prototype.attach = function (epic) {\n    var e_1, _a, e_2, _b, _c;\n\n    var subHandlers = epic.handlers;\n\n    try {\n      for (var _d = tslib_1.__values(epic.handlers.keys()), _e = _d.next(); !_e.done; _e = _d.next()) {\n        var symbol = _e.value;\n\n        try {\n          for (var _f = tslib_1.__values(epic.handlers.get(symbol).keys()), _g = _f.next(); !_g.done; _g = _f.next()) {\n            var type = _g.value;\n            this.createKey([symbol, type]);\n\n            (_c = this.handlers.get(symbol).get(type)).push.apply(_c, tslib_1.__spread(subHandlers.get(symbol).get(type)));\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_g && !_g.done && (_b = _f.return)) _b.call(_f);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_e && !_e.done && (_a = _d.return)) _a.call(_d);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return this;\n  };\n\n  Epic.prototype.on = function (ac, handler) {\n    return this.add(ac, handler);\n  };\n\n  Epic.prototype.onMany = function (ac, handler) {\n    return this.add(ac, handler);\n  };\n\n  Epic.prototype.onModule = function (moduleSymbol, handler) {\n    if (!this.moduleHandlers.has(moduleSymbol)) {\n      this.moduleHandlers.set(moduleSymbol, []);\n    }\n\n    this.moduleHandlers.get(moduleSymbol).push(handler);\n    return this;\n  };\n\n  Epic.prototype.createKey = function (actionType) {\n    var _a = tslib_1.__read(actionType, 2),\n        symbol = _a[0],\n        type = _a[1];\n\n    if (!this.handlers.has(symbol)) {\n      this.handlers.set(symbol, new Map());\n    }\n\n    var map = this.handlers.get(symbol);\n\n    if (!map.has(type)) {\n      map.set(type, []);\n    }\n  };\n\n  Epic.prototype.add = function (ac, handler) {\n    var _this = this;\n\n    var keys = Array.isArray(ac) ? ac.map(function (x) {\n      return getACType(x);\n    }) : [getACType(ac)];\n    keys.forEach(function (_a) {\n      var _b = tslib_1.__read(_a, 2),\n          symbol = _b[0],\n          type = _b[1];\n\n      _this.createKey([symbol, type]);\n\n      _this.handlers.get(symbol).get(type).push(handler);\n    });\n    return this;\n  };\n\n  return Epic;\n}();\n\nexport { Epic };","map":null,"metadata":{},"sourceType":"module"}