{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { queueScheduler, merge, empty, defer, from, of } from 'rxjs';\nimport { mergeMap, observeOn, subscribeOn } from 'rxjs/operators';\nimport { logAction, isAction } from './utils';\n\nfunction getHandlers(stores, action) {\n  var _a = tslib_1.__read(action.type, 2),\n      symbol = _a[0],\n      type = _a[1];\n\n  return stores.filter(function (store) {\n    if (!store.isEnabled || !store.epic) {\n      return false;\n    }\n\n    var _a = store.epic,\n        handlers = _a.handlers,\n        moduleHandlers = _a.moduleHandlers;\n    return moduleHandlers.has(symbol) || handlers.has(symbol) && handlers.get(symbol).has(type);\n  }).map(function (store) {\n    var _a = store.epic,\n        handlers = _a.handlers,\n        moduleHandlers = _a.moduleHandlers;\n    return tslib_1.__spread(handlers.has(symbol) && handlers.get(symbol).has(type) ? handlers.get(symbol).get(type) : [], moduleHandlers.has(symbol) ? moduleHandlers.get(symbol) : []).map(function (handler) {\n      return {\n        store: store,\n        handler: handler\n      };\n    });\n  }).reduce(function (ret, arr) {\n    ret.push.apply(ret, tslib_1.__spread(arr));\n    return ret;\n  }, []);\n}\n\nexport function createOutputStream(action$, stores) {\n  var deps = {\n    action$: action$\n  };\n  return action$.pipe(subscribeOn(queueScheduler), observeOn(queueScheduler), mergeMap(function (sourceAction) {\n    var handlers = getHandlers(stores, sourceAction);\n\n    if (!handlers.length) {\n      return empty();\n    }\n\n    return merge.apply(void 0, tslib_1.__spread(handlers.map(function (_a) {\n      var store = _a.store,\n          handler = _a.handler;\n      return defer(function () {\n        var name = store.displayName;\n\n        if (process.env.NODE_ENV === 'development') {\n          logAction(name, sourceAction);\n        }\n\n        var result = handler(sourceAction.payload, deps, sourceAction);\n\n        if (Array.isArray(result)) {\n          return from(result);\n        }\n\n        if (isAction(result)) {\n          return of(result);\n        }\n\n        return result;\n      }).pipe(mergeMap(function (action) {\n        if (action === null) {\n          return empty();\n        }\n\n        if (action === undefined) {\n          console.error('Undefined action returned in epic.', {\n            action: action,\n            store: name\n          });\n          return empty();\n        }\n\n        if (!isAction(action)) {\n          console.error('Invalid action returned in epic.', {\n            sourceAction: sourceAction,\n            action: action,\n            store: name\n          });\n          return empty();\n        }\n\n        return of(action);\n      }));\n    })));\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}