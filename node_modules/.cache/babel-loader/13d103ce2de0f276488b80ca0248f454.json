{"ast":null,"code":"import _slicedToArray from \"/Users/maru/project/typless-sample/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/maru/project/typless-sample/src/index.tsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createModule, useActions, DefaultTypelessProvider } from 'typeless';\nimport QiitaRepository from './repository/qiita';\n/* == Module Interface == */\n\nconst _createModule$withAct = createModule(Symbol('counter')) // Create Actions Creators\n.withActions({\n  startCount: null,\n  // null means no args\n  countDone: items => ({\n    payload: {\n      items\n    }\n  })\n}).withState(),\n      _createModule$withAct2 = _slicedToArray(_createModule$withAct, 3),\n      useModule = _createModule$withAct2[0],\n      CounterActions = _createModule$withAct2[1],\n      getCounterState = _createModule$withAct2[2];\n\nexport { useModule, CounterActions, getCounterState };\n\n/* == Module Implementation == */\nconst initialState = {\n  isLoading: false,\n  count: 0,\n  items: []\n}; // Create Epic for side effects\n\nuseModule.epic() // Listen for `count` and dispatch `countDone` with 500ms delay\n.on(CounterActions.startCount, async () => {\n  const repository = new QiitaRepository();\n  return repository.getItem().then(response => CounterActions.countDone(response));\n}); // Create a reducer\n// Under the hood it uses `immer` and state mutations are allowed\n\nuseModule.reducer(initialState).on(CounterActions.startCount, state => {\n  state.isLoading = true;\n}).on(CounterActions.countDone, (state, {\n  items\n}) => {\n  state.isLoading = false;\n  state.items = items;\n});\n/* == Use Module in React == */\n\nexport function Counter() {\n  // load epic and reducer\n  useModule(); // wrap actions with `dispatch`\n\n  const _useActions = useActions(CounterActions),\n        startCount = _useActions.startCount; // get state from store\n\n\n  const _getCounterState$useS = getCounterState.useState(),\n        isLoading = _getCounterState$useS.isLoading,\n        count = _getCounterState$useS.count,\n        items = _getCounterState$useS.items;\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    disabled: isLoading,\n    onClick: startCount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, isLoading ? 'loading...' : 'increase'), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"count: \", count), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, items));\n}\nReactDOM.render(React.createElement(DefaultTypelessProvider, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77\n  },\n  __self: this\n}, React.createElement(Counter, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 78\n  },\n  __self: this\n})), document.getElementById('app'));","map":{"version":3,"sources":["/Users/maru/project/typless-sample/src/index.tsx"],"names":["React","ReactDOM","createModule","useActions","DefaultTypelessProvider","QiitaRepository","Symbol","withActions","startCount","countDone","items","payload","withState","useModule","CounterActions","getCounterState","initialState","isLoading","count","epic","on","repository","getItem","then","response","reducer","state","Counter","useState","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,uBAAnC,QAAkE,UAAlE;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AAEA;;8BAE4DH,YAAY,CACtEI,MAAM,CAAC,SAAD,CADgE,CAAZ,CAG1D;AAH0D,CAIzDC,WAJyD,CAI7C;AACXC,EAAAA,UAAU,EAAE,IADD;AACO;AAClBC,EAAAA,SAAS,EAAGC,KAAD,KAAiB;AAAEC,IAAAA,OAAO,EAAE;AAAED,MAAAA;AAAF;AAAX,GAAjB;AAFA,CAJ6C,EAQzDE,SARyD,E;;MAA9CC,S;MAAWC,c;MAAgBC,e;;;;AAgBzC;AAEA,MAAMC,YAA0B,GAAG;AACjCC,EAAAA,SAAS,EAAE,KADsB;AAEjCC,EAAAA,KAAK,EAAE,CAF0B;AAGjCR,EAAAA,KAAK,EAAE;AAH0B,CAAnC,C,CAMA;;AACAG,SAAS,CACNM,IADH,GAEE;AAFF,CAGGC,EAHH,CAGMN,cAAc,CAACN,UAHrB,EAGiC,YAAW;AACxC,QAAMa,UAAU,GAAG,IAAIhB,eAAJ,EAAnB;AACA,SAAOgB,UAAU,CAACC,OAAX,GAAqBC,IAArB,CAA2BC,QAAD,IAAcV,cAAc,CAACL,SAAf,CAAyBe,QAAzB,CAAxC,CAAP;AACD,CANH,E,CAQA;AACA;;AACAX,SAAS,CACNY,OADH,CACWT,YADX,EAEGI,EAFH,CAEMN,cAAc,CAACN,UAFrB,EAEiCkB,KAAK,IAAI;AACtCA,EAAAA,KAAK,CAACT,SAAN,GAAkB,IAAlB;AACD,CAJH,EAKGG,EALH,CAKMN,cAAc,CAACL,SALrB,EAKgC,CAACiB,KAAD,EAAQ;AAAEhB,EAAAA;AAAF,CAAR,KAAsB;AAClDgB,EAAAA,KAAK,CAACT,SAAN,GAAkB,KAAlB;AACAS,EAAAA,KAAK,CAAChB,KAAN,GAAcA,KAAd;AACD,CARH;AAUA;;AAEA,OAAO,SAASiB,OAAT,GAAmB;AACxB;AACAd,EAAAA,SAAS,GAFe,CAIxB;;AAJwB,sBAKDV,UAAU,CAACW,cAAD,CALT;AAAA,QAKhBN,UALgB,eAKhBA,UALgB,EAMxB;;;AANwB,gCAOYO,eAAe,CAACa,QAAhB,EAPZ;AAAA,QAOhBX,SAPgB,yBAOhBA,SAPgB;AAAA,QAOLC,KAPK,yBAOLA,KAPK;AAAA,QAOER,KAPF,yBAOEA,KAPF;;AASxB,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,QAAQ,EAAEO,SAAlB;AAA6B,IAAA,OAAO,EAAET,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGS,SAAS,GAAG,YAAH,GAAkB,UAD9B,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAaC,KAAb,CAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMR,KAAN,CALF,CADF;AASD;AAEDT,QAAQ,CAAC4B,MAAT,CACE,oBAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAJF","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Rx from 'typeless/rx';\nimport { createModule, useActions, DefaultTypelessProvider } from 'typeless';\nimport QiitaRepository from './repository/qiita'\n\n/* == Module Interface == */\n\nexport const [useModule, CounterActions, getCounterState] = createModule(\n  Symbol('counter')\n)\n  // Create Actions Creators\n  .withActions({\n    startCount: null, // null means no args\n    countDone: (items: any) => ({ payload: { items } }),\n  })\n  .withState<CounterState>();\n\nexport interface CounterState {\n  isLoading: boolean;\n  count: number;\n  items: []\n}\n\n/* == Module Implementation == */\n\nconst initialState: CounterState = {\n  isLoading: false,\n  count: 0,\n  items: []\n};\n\n// Create Epic for side effects\nuseModule\n  .epic()\n  // Listen for `count` and dispatch `countDone` with 500ms delay\n  .on(CounterActions.startCount, async() => {\n    const repository = new QiitaRepository\n    return repository.getItem().then((response) => CounterActions.countDone(response))\n  });\n\n// Create a reducer\n// Under the hood it uses `immer` and state mutations are allowed\nuseModule\n  .reducer(initialState)\n  .on(CounterActions.startCount, state => {\n    state.isLoading = true;\n  })\n  .on(CounterActions.countDone, (state, { items }) => {\n    state.isLoading = false;\n    state.items = items;\n  });\n\n/* == Use Module in React == */\n\nexport function Counter() {\n  // load epic and reducer\n  useModule();\n\n  // wrap actions with `dispatch`\n  const { startCount } = useActions(CounterActions);\n  // get state from store\n  const { isLoading, count, items } = getCounterState.useState();\n\n  return (\n    <div>\n      <button disabled={isLoading} onClick={startCount}>\n        {isLoading ? 'loading...' : 'increase'}\n      </button>\n      <div>count: {count}</div>\n      <div>{items}</div>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <DefaultTypelessProvider>\n    <Counter />\n  </DefaultTypelessProvider>,\n  document.getElementById('app')\n);"]},"metadata":{},"sourceType":"module"}