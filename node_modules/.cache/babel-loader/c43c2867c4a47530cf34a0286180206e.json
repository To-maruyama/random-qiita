{"ast":null,"code":"import _slicedToArray from \"/Users/maru/project/typless-sample/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/maru/project/typless-sample/src/index.tsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Rx from 'typeless/rx';\nimport { createModule, DefaultTypelessProvider } from 'typeless';\nimport QiitaRepository from './repository/Qiita';\n\nconst _createModule$withAct = createModule(Symbol('counter')) // Create Actions Creators\n.withActions({\n  $mounted: null,\n  getItems: null,\n  // null means no args\n  getItemsDone: items => ({\n    payload: {\n      items\n    }\n  }),\n  getTags: null,\n  // null means no args\n  getTagsDone: tags => ({\n    payload: {\n      tags\n    }\n  })\n}).withState(),\n      _createModule$withAct2 = _slicedToArray(_createModule$withAct, 3),\n      useModule = _createModule$withAct2[0],\n      CounterActions = _createModule$withAct2[1],\n      getCounterState = _createModule$withAct2[2];\n\nexport { useModule, CounterActions, getCounterState };\n\n/* == Module Implementation == */\nconst initialState = {\n  items: [],\n  tags: undefined\n};\nconst repository = new QiitaRepository(); // Create Epic for side effects\n\nuseModule.epic() // Listen for `count` and dispatch `countDone` with 500ms delay\n.on(CounterActions.$mounted, () => {\n  return Rx.of(CounterActions.getItems());\n}).on(CounterActions.getTags, async () => {\n  const page = Math.floor(Math.random() * 99) + 1;\n  return repository.getTags(page).then(response => CounterActions.getTagsDone(response));\n}).on(CounterActions.getItems, async () => {\n  return repository.getItems().then(response => CounterActions.getItemsDone(response));\n}); // Create a reducer\n// Under the hood it uses `immer` and state mutations are allowed\n\nuseModule.reducer(initialState).on(CounterActions.startCount, state => {\n  state.isLoading = true;\n}).on(CounterActions.countDone, (state, {\n  items\n}) => {\n  state.isLoading = false;\n  state.items = items;\n});\n/* == Use Module in React == */\n\nexport function Counter() {\n  // load epic and reducer\n  useModule(); // wrap actions with `dispatch`\n  // get state from store\n\n  const _getCounterState$useS = getCounterState.useState(),\n        items = _getCounterState$useS.items;\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, items.map((x, index) => React.createElement(\"div\", {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, x.title)));\n}\nReactDOM.render(React.createElement(DefaultTypelessProvider, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 81\n  },\n  __self: this\n}, React.createElement(Counter, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 82\n  },\n  __self: this\n})), document.getElementById('app'));","map":{"version":3,"sources":["/Users/maru/project/typless-sample/src/index.tsx"],"names":["React","ReactDOM","Rx","createModule","DefaultTypelessProvider","QiitaRepository","Symbol","withActions","$mounted","getItems","getItemsDone","items","payload","getTags","getTagsDone","tags","withState","useModule","CounterActions","getCounterState","initialState","undefined","repository","epic","on","of","page","Math","floor","random","then","response","reducer","startCount","state","isLoading","countDone","Counter","useState","map","x","index","title","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Rx from 'typeless/rx';\nimport { createModule, DefaultTypelessProvider } from 'typeless';\nimport QiitaRepository from './repository/Qiita'\nimport Item from './models/Item'\nimport Tag, {Tags} from './models/Tag'\n\n/* == Module Interface == */\n\nexport const [useModule, CounterActions, getCounterState] = createModule(\n  Symbol('counter')\n)\n  // Create Actions Creators\n  .withActions({\n    $mounted: null,\n    getItems: null, // null means no args\n    getItemsDone: (items: Array<Item>) => ({ payload: { items } }),\n    getTags: null, // null means no args\n    getTagsDone: (tags: any) => ({ payload: { tags } }),\n  })\n  .withState<CounterState>();\n\nexport interface CounterState {\n  items: Array<Item>,\n  tags?: Tags\n}\n\n/* == Module Implementation == */\n\nconst initialState: CounterState = {\n  items: [],\n  tags: undefined\n};\n\nconst repository = new QiitaRepository()\n\n// Create Epic for side effects\nuseModule\n  .epic()\n  // Listen for `count` and dispatch `countDone` with 500ms delay\n  .on(CounterActions.$mounted, ()  => {return Rx.of(CounterActions.getItems())})\n  .on(CounterActions.getTags, async() => {\n    const page = Math.floor( Math.random() * 99 ) + 1\n    return repository.getTags(page).then((response) => CounterActions.getTagsDone(response))\n  })\n  .on(CounterActions.getItems, async() => {\n    return repository.getItems().then((response) => CounterActions.getItemsDone(response))\n  });\n\n// Create a reducer\n// Under the hood it uses `immer` and state mutations are allowed\nuseModule\n  .reducer(initialState)\n  .on(CounterActions.startCount, state => {\n    state.isLoading = true;\n  })\n  .on(CounterActions.countDone, (state, { items }) => {\n    state.isLoading = false;\n    state.items = items;\n  });\n\n/* == Use Module in React == */\n\nexport function Counter() {\n  // load epic and reducer\n  useModule();\n\n  // wrap actions with `dispatch`\n  // get state from store\n  const { items } = getCounterState.useState();\n\n  return (\n    <div>\n      {items.map((x, index) => <div key={index}>{x.title}</div>)}\n    </div>\n  );\n}\n\nReactDOM.render(\n  <DefaultTypelessProvider>\n    <Counter />\n  </DefaultTypelessProvider>,\n  document.getElementById('app')\n);"]},"metadata":{},"sourceType":"module"}