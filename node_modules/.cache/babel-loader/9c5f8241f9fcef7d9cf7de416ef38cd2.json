{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { produce } from 'immer';\nimport { toArray, getACType } from './utils';\n\nvar createNestedReducer = function createNestedReducer(prop, reducer) {\n  return function (state, action) {\n    var _a;\n\n    if (typeof state === 'undefined') {\n      throw new Error('tried to create createNestedReducer with undefined parent state');\n    }\n\n    var subState = reducer(state[prop], action);\n\n    if (state[prop] !== subState) {\n      return tslib_1.__assign({}, state, (_a = {}, _a[prop] = subState, _a));\n    }\n\n    return state;\n  };\n};\n\nvar ChainedReducer = function () {\n  function ChainedReducer(initial) {\n    this.initial = initial;\n    this.reducerMap = new Map();\n    this.defaultReducers = [];\n    this.reducer = null;\n  }\n\n  ChainedReducer.prototype.asReducer = function () {\n    var _this = this;\n\n    if (!this.reducer) {\n      var reducer_1 = this.getReducer();\n      Object.getOwnPropertyNames(ChainedReducer.prototype).forEach(function (key) {\n        var prop = _this[key];\n\n        if (typeof prop === 'function') {\n          reducer_1[key] = prop.bind(_this);\n        }\n      });\n      this.reducer = reducer_1;\n    }\n\n    return this.reducer;\n  };\n\n  ChainedReducer.prototype.attach = function (prop, fn) {\n    if (typeof prop === 'string') {\n      if (typeof fn !== 'function') {\n        throw new Error('fn must be a function');\n      }\n\n      this.defaultReducers.push(createNestedReducer(prop, fn));\n    } else {\n      if (typeof prop !== 'function') {\n        throw new Error('fn must be a function');\n      }\n\n      this.defaultReducers.push(prop);\n    }\n\n    return this.asReducer();\n  };\n\n  ChainedReducer.prototype.replace = function (actionCreator, fn) {\n    this.transform(actionCreator, function (state, action) {\n      return produce(state, function (draft) {\n        return fn(draft, action.payload, action);\n      });\n    });\n    return this.asReducer();\n  };\n\n  ChainedReducer.prototype.mergePayload = function (actionCreators) {\n    this.transform(actionCreators, function (state, action) {\n      return Object.assign({}, state, action.payload);\n    });\n    return this.asReducer();\n  };\n\n  ChainedReducer.prototype.nested = function (prop, fn) {\n    var nested = fn(new ChainedReducer(this.initial[prop]));\n    this.defaultReducers.push(createNestedReducer(prop, nested.getReducer()));\n    return this.asReducer();\n  };\n\n  ChainedReducer.prototype.on = function (actionCreator, fn) {\n    this.transform(actionCreator, function (state, action) {\n      return produce(state, function (draft) {\n        return fn(draft, action.payload, action);\n      });\n    });\n    return this.asReducer();\n  };\n\n  ChainedReducer.prototype.onMany = function (actionCreator, fn) {\n    return this.on(actionCreator, fn);\n  };\n\n  ChainedReducer.prototype.getReducer = function () {\n    var _this = this;\n\n    return function (state, action) {\n      if (state === void 0) {\n        state = _this.initial;\n      }\n\n      if (!action.type) {\n        throw new Error('action.type must be defined');\n      }\n\n      var reducers = _this.getReducers(action.type).concat(_this.defaultReducers);\n\n      if (!reducers.length) {\n        return state;\n      }\n\n      return reducers.reduce(function (prev, fn) {\n        return fn(prev, action);\n      }, state);\n    };\n  };\n\n  ChainedReducer.prototype.getReducers = function (actionType) {\n    var _a = tslib_1.__read(actionType, 2),\n        symbol = _a[0],\n        type = _a[1];\n\n    if (!this.reducerMap.has(symbol)) {\n      this.reducerMap.set(symbol, new Map());\n    }\n\n    var map = this.reducerMap.get(symbol);\n\n    if (!map.has(type)) {\n      map.set(type, []);\n    }\n\n    return map.get(type);\n  };\n\n  ChainedReducer.prototype.transform = function (actionCreators, reducerFn) {\n    var _this = this;\n\n    var actionTypes = toArray(actionCreators).map(function (ac) {\n      return getACType(ac);\n    });\n    actionTypes.forEach(function (action) {\n      _this.getReducers(action).push(reducerFn);\n    });\n  };\n\n  return ChainedReducer;\n}();\n\nexport { ChainedReducer };","map":null,"metadata":{},"sourceType":"module"}